一.组件
1.基础组件basic widgets
1.1.Text
1.2.Icon
1.3.Image
1.4.Button
1.5.FlutterLogo

2.单一子元素组件Single-child
2.1.Container
2.2.SingleChildScrollView 滚动布局
2.3.FittedBox 负责组件缩放和位置的调整
属性：fit、alignment
2.4.FractionallySizedBox基于宽度缩放银子和高度缩放银子来调整布局大小，大小有可能超出其父组件的设置，如果该组件里的子组件设置了大小值，它是不会起作用的
widthFactor、heightFactor
2.5.ConstrainedBox 约束限制的布局，子组件不可逾越
constraints主要它起作用，并不能为空，必须传入的，minWidth,minHeight,maxWidth,maxHeight
2.6.Baseline 基线对其方式，可以将几个不相干的组件设置在同一条水平线上进行对齐
baseline和baselineType都不能为空

3.多子元素组件Multi-child
3.1.Scaffold Flutter提供的一个标准化的布局容器
3.2.AppBar APP的顶部导航栏
3.3.Row和Column 线性布局 类似Android的LinearLayout
Row是横向，Column是纵向
3.4.ListView列表型的
构建方式：
ListView(),ListView.Builder(),ListView.separated(),ListView.custom()
还有各种样式需要挖掘例如ListWheelScrollView类似苹果车轮样式
3.5.GridView网格型的
3.6.CustomScrollView组合滚动GridView+ListView
转换之后组件都是以“Sliver”开头
3.7.Flex弹性布局
3.8.Wrap包裹，类似适配，不会使组件撑破父组件，并进行换行

4.状态管理
4.1.StatelessWidget无状态的Widget，对于其内部属性，应该被声明final，以防被意外改变
两步：(1)初始化，(2)重写build进行渲染
4.2.StatefulWidget状态的Widget
4.3.State是对StatefulWidget的行为和布局的描述，和StatefulWidget存在一一对应关系
4.4.State生命周期
[显示在RenderTree]->开始->构造函数->initState->didChangeDependencies->build->[组件状态改变]->didUpdateWidget->build->[移除掉]->deactivate->Dispose-[结束]
首次启动页面执行：initState->didChangeDependencies->build
热重载：reassemble->didUpdateWidget->build
页面跳转：deactivate->didChangeDependencies->build
4.4.1.initState是State生命周期里第一个被执行的方法，并且在生命周期里只会被执行一次，Context和State还未关联在一起，所以不能访问Context
4.4.2.didChangeDependencies在initState方法之后执行，这时候可以访问Context，如果Widget使用了InheritedWidget的数据，并在数据发生变化时，就会触发didChangeDependencies的回调
4.4.3.build方法在执行完didChangeDependencies和didUpdateWidget之后被执行，每当调用setState(({...}))方法时都会被执行
4.4.4.disponse方法在组件被销毁时调用
4.5.Widget唯一身份标识：Key
4.6.InheritedWidget被它暴露出来的数据，可以高效地在Widget树中从上往下传递和共享，并支持跨级数据传输